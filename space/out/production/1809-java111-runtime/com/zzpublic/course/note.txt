day05
    区间规律
        什么是？
            永远 [x, y)

        比如 index
            5
            0 1 2 3 4
            [0, 5)

    For 语句技巧
        步骤
            1.  写不是for语句的
            2.  写模板
                for (int i = 0; i < _A_; i++) {
                    _B_
                }

            3.  _A_ 填 需要循环几次
                原始代码有多少次重复

            4.  _B_ 填 相同 + 规律
                找相同 和 不同
                找 i 序列 和 不同的值的序列的规律
                i 0 1 2 3
                v 1 2 3 4
                -> v = i + 1

    For 练习
        1.
            5 4 3 2 1
        2.

            1 3 5 7 9

        3.
            * * * * *
            Console.print();

lesson 06
    For + Boolean 做逻辑验证
    break / continue
    问答
        == vs =
        int a = 3;
        int b = 4;

        a = b -> 把 b 付给 a, 产出 值 就是 a 最后的值
        a == b -> 产出 boolean 值

    while
        需求：
            <
            <   菜单
            <   --------------------
            <   查询余额请按 1
            <   退出请按 0
            >   1
            <   您的余额是 0 元
            <
            <   菜单
            <   --------------------
            <   查询余额请按 1
            <   退出请按 0
            >   1
            <   您的余额是 0 元
            <
            <   菜单
            <   --------------------
            <   查询余额请按 1
            <   退出请按 0
            >   1
            <   您的余额是 0 元
            <
            <   菜单
            <   --------------------
            <   查询余额请按 1
            <   退出请按 0
            >   0
            <   拜拜


lesson 11

    if 对比

        public int f(int a, int b){
            int c;
            if (a >= b) {
                c = a;
            }
            if (b >= a) {
                c = b;
            }
            //4
            return c
        }

        public int f(int v1, int v2){
            int min = 0;

            if(v1 < v2) {
                min = v1;
            } else if(v2 >= v1){
                min = v2;
            }
            //3
            return min;
        }

        public int min(int v1, int v2){
            int max = 0;
            if (v1 > v2){
                max = v1;
            } else { // v1 <= v2
                max = v2;
            }
            //2
            return max;
        }

lesson 16 二进制
    进制
        10 进制
        2 进制
        16 进制

    列表
        16  10  2
        0   0   0
        1   1   1
        2   2   10
        3   3   11
        4   4   100
        5   5   101
        6   6   110
        7   7   111
        8   8   1000
        9   9   1001
        A   10  1010
        B   11  1011
        C   12  1100
        D   13  1101
        E   14  1110
        F   15  1111
        10  16  1 0000

    单位
        bit 代表一个 1/0
        1 bit 比特
        1 byte 字节 = 8 bits
        1000 byte = 1kb
        1000 kb = 1mb

        注意
        1byte = 8 bits
        xxxx xxxx
        1byte 可以用 2个 16进制表达
        2F 47 A2 09

    整数
        表达
            0000 0001

            2^8 个整数

        尺寸
            int / long
            32-bits / 64-bits
            2^32 个 整数

        负数
            0001
            2^4 个整数
            0 ~ 2^4 - 1
            0000    0
            0001    1
            ...
            1111    15
            0000    16  x

            基本思路
            1.  让出一半的空间 给 负数
            2.
                0001 + 1 = 0010
                ->
                0010 - 1 = 0001


                1111 + 1 = 1 0000 = 0000
                0000 - 1 = 1111
                0 - 1 = -1


            0111    7
            0110    6
            0101    5
            0100    4
            0011    3
            0010    2
            0001    1
            0000    0
            ----------------
            1111    -1
            1110    -2
            1101    -3
            1100    -4
            1011    -5
            1010    -6
            1001    -7
            1000    -8


            signed int
                -2^3 ~ 2^3 - 1

            unsigned int
                0 ~ 2^4 - 1



        结论
            不同语言里 int 的范围不一样
            尽量留意 数据溢出

    练习
        4 0 4 1

        push
        4 4 1 0

        merge
        8 0 1 0

        push
        8 1 0 0











































